#!/usr/bin/env ruby
require_relative 'logic'
require_relative 'color'

def change_answer_format(answer, alpha, excl)
	array_answer = []

  # creates an array of hashes of different possible sets of answers
	answer.each do |string|
		string_hash = {}
	split_string = string.split(" ")
	split_string.each do |element|
		if excl.include?(element)
				element = element.gsub("!", "")
			string_hash[element.to_sym] = false
			elsif alpha.include?(element)
			string_hash[element.to_sym] = true
			end
	end
	array_answer.push(string_hash)
	end
	array_answer
end

def change_signs(string, alpha, excl)
  # changes answers from positive to negative or vice versa
  split_string = string.split(" ")
  split_string.map! do |element|
		if excl.include?(element)
			element = element.gsub("!", "")
		elsif alpha.include?(element)
			element = "!" + element
		end
		element
	end
	return split_string.join(" ")
end

def split_on_spaces(array)
	# Split based on spaces
	array.map! do |element|
		element.split(/ /)
	end
end

def check_characters_valid(lines, alpha, excl)
  lines.each do |line|
	line.each_with_index do |element, index|
		element = element.gsub(/[()]/, '')
		if excl.include?(element) || alpha.include?(element)
			next
		elsif element == '+' || element == '|' || element == '^' || element == ''
			next
		else
			# p line
			raise "invalid character '#{element}' in rule"
		end
	  end
  end
end

def check_answers_for_parentheses(array)
	array.each do |element|
		element = element.join(" ")
		if element.include?('(') || element.include?(')')
			raise "answer cannot contain parentheses, #{element}"
		end
	end
end

def format_letters(arrays)
	# Turn letters into format for being called from hash A => facts[:A]
	# p arrays
  arrays.map! do |array|
	array.map! do |element|
		# p element
		element = element.gsub(/([A-Z])/, 'facts[:\1]')
		element = element.gsub(/\+/, '&&')
		# p element
	  end
	end
end

def eval_array(arrays)
	facts = {}
	('A'..'Z').each {|letter| facts[letter] = false}
	# Join arrays and evaluate
	# puts "array"
	# p arrays
  arrays.each do |array|
		string = array.join(" ")
	  begin
			eval string
		rescue SyntaxError => se
		  raise "rescue from syntax error #{string}: #{se.message}"
		rescue Exception => e 
			raise "rescue exception #{string}: #{e.message}"
		end
	end
end

def parse(file_path)
	file = File.open(file_path, "r")
  data = file.read
	file.close
	array = data.split("\n")
	# Check if file is legit
	# Removes comments from file
	array.map! do |element|
		if element.nil? || element.empty?
			next
		end
		this = element.split('#')
		this[0].gsub(/\s+/, ' ').strip
	end
	array.reject! { |c| c.nil? || c.empty? }

	statements     = nil
	queries        = nil
	array.each_with_index do |line, index|
		if line[0] == '='
			raise "file contains more than one statement line" unless statements.nil?
			statements = line
			array[index] = ''
		elsif line[0] == '?'
			raise "file contains more than one query line"     unless queries.nil?
			queries = line
			array[index] = ''
		end
	end
	raise "file contains no statement line" if statements.nil?
	raise "file contains no query line"     if queries.nil?
	array.reject! { |c| c.empty? }

	list_questions = []
	list_answers   = []

	# creates two arrays of allowed values for characters i.e. A or !A
	alpha = ('A'..'Z').to_a
	excl = alpha.map { |element| '!' + element }

	# Split the two halves
	array.each do |element|
		raise "invalid line '#{element}'" unless element.include?('=>')
		elements = element.split('=>')
		if (elements.count != 2 || elements[0].nil? || elements[1].nil? || elements[0].strip.empty? || elements[1].strip.empty?)
			raise "invalid question '#{element}'"
		end
		list_questions.push(elements[0].strip)
		list_answers.push(elements[1].strip)
		# if (elements[2] != nil)
		# 	exit
		# end
	end

	split_on_spaces(list_questions)
	split_on_spaces(list_answers)

	# if and only if scenario, doubles rule opposite sides
	list_questions.map!.with_index do |array, index|
		if array[-1] == '<'
			array.pop
			list_questions.push(list_answers[index].dup)
			list_answers.push(array.dup)
		end
		array
	end

	check_characters_valid(list_questions, alpha, excl)
	check_characters_valid(list_answers, alpha, excl)
	check_answers_for_parentheses(list_answers)
	test_ans = list_answers.map(&:clone)

	format_letters(list_questions)
	format_letters(test_ans)

	eval_array(list_questions)
	eval_array(test_ans)

	list_questions.map! do |array|
		array.join(" ")
	end

	# Runs different answer scenarios and returns an array of possible ones
	list_answers.map! do |answer|
		answer = answer.join(" ")
		array = [answer.gsub(/[+]/, '')]
		new_array = []
		while array.count > new_array.count
			new_array = []
			array.each do |element|
				if element.include?('|')
					splitted = element.split(/[|]/, 2).map(&:strip)
					new_array += splitted
					next
				elsif element.include?('^')
					splitted = element.split(/[\^]/, 2).map(&:strip)
					before_change = splitted[0].dup
					splitted[0] = splitted[0] + " " + change_signs(splitted[1], alpha, excl)
					splitted[1] = splitted[1] + " " + change_signs(before_change, alpha, excl)
					new_array += splitted
					next
				end
				new_array << element
			end
			array,new_array = new_array,array
		end
		array
	end

	# Changes list of questions and answers to format needed for logic, {Q: [{A}, {A}, {A}], Q: [{A}, {A}, {A}]}
	final_answer_format = {}
	list_answers.each_with_index do |answer, index|
		while final_answer_format[list_questions[index]]
			list_questions[index] += ' '
		end
		final_answer_format[list_questions[index]] = change_answer_format(answer, alpha, excl)
	end

	raise "statements line is missing" if statements == ''
	# p statements
	statements = statements.split('')
	statements.map!.with_index do |element, index|
		if index == 0 && element != '='
			raise "statements line must begin with an equals sign"
		elsif index == 0
			next
		elsif !alpha.include?(element)
			raise "statement should not contain spaces" if element == ' '
			raise "statement can only include capital alphabetical characters"
		end
		element.to_sym
	end
	queries = queries.split("")
	queries.map!.with_index do |element, index|
		if index == 0 && element != '?'
			raise "query must begin with a question mark"
		elsif index == 0
			next
		elsif !alpha.include?(element)
			raise "query should not contain spaces" if element == ' '
			raise "query can only include capital alphabetical characters"
		end
		element.to_sym
	end
	statements.compact!
	queries.compact!
	# should you check for multiple statement or queries that are the same 
	logic_this(statements.uniq, final_answer_format, queries.uniq.sort)
end

#handle VERBOSE and SLOW
while true do
	case ARGV[0]
	when '-v'
	$VERBOSE = true
	ARGV.shift
	next
	when '-s'
	$SLOW = true
	ARGV.shift
	next
	when '-vs', '-sv'
	$VERBOSE = true
	$SLOW = true
	ARGV.shift
	next
	when '--'
	ARGV.shift
	break
	end
  break
end

puts "Warning: SLOW option ignored when output is not VERBOSE\n".red if $SLOW && !$VERBOSE

if ARGV.count > 0
	ARGV.each do |file_path|
		begin
			puts "---------------> File: #{file_path}".light_blue
			parse(file_path)
		rescue Exception => e
			next if e.message == 'exit'
			message = e.message
			if message.include?('(eval):1: syntax error, ')
				message = message.split('syntax error, ').last()
				message.gsub!('&&', '+')
				message.gsub!(/facts\[:(.*?)\]/, '\1')
				message.sub!(/\n([ \^]*?)$/, '')
				# if message.include?("\n")
				# 	message = message.split("\n")
				# 	message.pop
				# 	message = message.join("\n")
				# 	message.gsub!('&&', '+')
				# 	message.gsub!(/facts\[:(.*?)\]/, '\1')
				# end
				puts "Syntax Error: #{message}".red
			else
				puts "Parsing Error: #{message}".red
			end
			# p e.backtrace
		end
	end
else
	puts 'Need file paths!'
end
